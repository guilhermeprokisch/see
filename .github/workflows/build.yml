name: Multi-Channel Distribution

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: smd

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Get version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

  build-and-release:
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin
          - build: windows
            os: windows-latest
            target: x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target ${{ matrix.target }}
      - name: Package
        shell: bash
        run: |
          mkdir dist
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}.exe" dist/
            cd dist && 7z a "../${{ env.BINARY_NAME }}-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.zip" .
          else
            cp "target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}" dist/
            cd dist && tar czf "../${{ env.BINARY_NAME }}-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz" .
          fi
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.BINARY_NAME }}-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_name: ${{ env.BINARY_NAME }}-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_content_type: application/octet-stream

  create-packages:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm
      - name: Build for x86_64-unknown-linux-gnu
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target x86_64-unknown-linux-gnu
      - name: Create .deb package
        run: |
          cargo install cargo-deb
          cargo deb --target x86_64-unknown-linux-gnu
      - name: Create .rpm package
        run: |
          cargo install cargo-rpm
          cargo rpm build
      - name: Upload .deb package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/debian/${{ env.BINARY_NAME }}_${{ needs.create-release.outputs.version }}_amd64.deb
          asset_name: ${{ env.BINARY_NAME }}_${{ needs.create-release.outputs.version }}_amd64.deb
          asset_content_type: application/vnd.debian.binary-package
      - name: Upload .rpm package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/release/rpmbuild/RPMS/x86_64/${{ env.BINARY_NAME }}-${{ needs.create-release.outputs.version }}-1.x86_64.rpm
          asset_name: ${{ env.BINARY_NAME }}-${{ needs.create-release.outputs.version }}-1.x86_64.rpm
          asset_content_type: application/x-rpm

  update-homebrew:
    needs: [create-release, build-and-release]
    runs-on: ubuntu-latest
    steps:
      - name: Update Homebrew formula
        env:
          HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}
        run: |
          brew tap guilhermeprokisch/homebrew-smd
          brew bump-formula-pr --url=https://github.com/${{ github.repository }}/archive/${{ needs.create-release.outputs.version }}.tar.gz yourtap/${{ env.BINARY_NAME }}

  update-winget:
    needs: [create-release, build-and-release]
    runs-on: windows-latest
    steps:
      - name: Update winget package
        run: |
          # You'll need to implement the logic to update the winget manifest
          # This might involve creating a PR to the winget-pkgs repository

  publish-crates-io:
    needs: [create-release, build-and-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Publish to crates.io
        env:
          CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: cargo publish

  create-docker-image:
    needs: [create-release, build-and-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: yourusername/${{ env.BINARY_NAME }}:${{ needs.create-release.outputs.version }},yourusername/${{ env.BINARY_NAME }}:latest
